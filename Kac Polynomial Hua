# Install SageMath
!sudo apt-get update
!sudo apt-get install -y sagemath


# Import necessary libraries
from sage.all import *
import itertools

# Define the polynomial ring
R = PolynomialRing(QQ, 'q')
S = PolynomialRing(QQ, 't')
q = R.gen()
t = S.gen()

# Define the partition class
K = R.fraction_field()

print(R)
print(S)
class QuiverRepresentation:
    """
    A class to represent a quiver with vertices, edges, and a dimension vector.

    Attributes:
    vertices : list
        A list of vertices (Q_0) in the quiver.
    edges : list of tuples
        A list of directed edges (Q_1) represented as tuples (start_vertex, end_vertex).
    dimension_vector : list
        A list representing the dimension vector (alpha) corresponding to each vertex.
    """

    def __init__(self, vertices, edges, dimension_vector):
        """
        Initializes the quiver representation with vertices, edges, and dimension vector.

        Parameters:
        vertices : list
            The set of vertices (Q_0).
        edges : list of tuples
            The set of directed edges (Q_1).
        dimension_vector : list
            The dimension vector (alpha) for the vertices.
        """
        self.vertices = vertices  # Q_0: Set of vertices
        self.edges = edges  # Q_1: Set of edges (tuples of vertices)
        self.dimension_vector = dimension_vector  # alpha: Dimension vector

        variable_names = [f'x{i+1}' for i in range(len(dimension_vector))]
        self.T = PolynomialRing(K, len(dimension_vector), variable_names)
        self.variables = self.T.gens()

        V = 1
        for i in range(len(self.dimension_vector)):
            V = V * self.variables[i]**(self.dimension_vector[i]+1)

        self.T_quo = self.T.quotient(V)


    def display(self):
        """
        Prints the vertices, edges, and dimension vector of the quiver.
        """
        print("Vertices (Q_0):", self.vertices)
        print("Edges (Q_1):", self.edges)
        print("Dimension vector (alpha):", self.dimension_vector)

    def count_edges_between(self, vertex1, vertex2):
        """
        Counts the number of edges between two vertices.

        Parameters:
        vertex1 : any
            First vertex
        vertex2 : any
            Second vertex

        Returns:
        int
            The number of edges between vertex1 and vertex2.
        """
        if vertex1 == vertex2:
            return self.edges.count((vertex1, vertex2))
        else:
            return self.edges.count((vertex1, vertex2)) + self.edges.count((vertex2, vertex1))

    def P_numerator(self, Part, w):
        """
        input: n partitions as an array Part

        Output: Monomial in q
        """
        power = 0
        l = len(self.dimension_vector)

        for i in range(l):
            for j in range(i, l):
                vertex1 = self.vertices[i]
                vertex2 = self.vertices[j]
                ip = inner_product_partitions(Part[i], Part[j])

                aij = self.count_edges_between(vertex1, vertex2)
                power = power + aij * ip

        numerator = self.T(w**power)

        return numerator

    def P_denominator(self, Part, w):
        """
        input: n partitions as an array

        Output: Polynomial in q
        """

        l = len(self.dimension_vector)

        denominator = self.T_quo(1)
        for i in range(l):
            ip = inner_product_partitions(Part[i], Part[i])
            b = self.T_quo(b_pi(Part[i], w))
            denominator = self.T(denominator * w**ip * b)

        return denominator

    def P_Gamma(self, Part, w):
        """
        To compute the polynomial P_{Gamma}(X_1,X_2,...,X_n,q)

        Input:

        Output:

        """

        P_gamma = self.T(0)

        # Generate the Cartesian product of the lists
        cartesian_product = itertools.product(*Part)

        # Iterate over each combination in the Cartesian product
        for combination in cartesian_product:
            V = 1
            for i in range(len(combination)):
                V = V * self.variables[i]**sum(combination[i])
            P_gamma = P_gamma + (self.P_numerator(combination, w) / self.P_denominator(combination, w)) * V

        return P_gamma

    def log_P(self, Part, alpha, w):
        """
        Calculates log P series upto the required length
        """
        dim = sum(alpha) + 1

        P_gamma_1 = self.P_Gamma(Part, w) - 1

        log = self.T_quo(0)


        for i in range(1, dim):
            log = log + self.T_quo(((-1)**(i-1) * P_gamma_1**(i)) / i)

        return log

    def H_Gamma(self, alpha, w):
        """
        Computes H_Gamma by matching coefficients with log_P

        """

        a = gcd(alpha)

        partitions = []

        for i in range(len(alpha)):
            partitions.append([])
            for j in range(alpha[i] + 1):
                partitions[i] = partitions[i] + Partitions(j).list()



        log_P = self.log_P(partitions, alpha, w)

        V = 1
        for i in range(len(alpha)):
            V = V * self.variables[i]**sum(alpha[i])




        H_gamma = log_P.lift().monomial_coefficient(V) * a

        return H_gamma

    def A_Gamma(self):
        """
        Computes A_Gamma
        """

        a = gcd(self.dimension_vector)

        b = (q - 1) / a

        Div = divisors(a)

        A_gamma = 0

        for i in Div:
            alpha = []
            alpha = alpha + self.dimension_vector
            for j in range(len(alpha)):
                alpha[j] = alpha[j] / i
            w = q**i

            if moebius(i) == 0:
                A_gamma = A_gamma
            else:
                A_gamma = A_gamma + moebius(i) * self.H_Gamma(alpha, w)

        A_gamma = b * A_gamma

        return A_gamma

    def C_Gamma(self):
        """
        Only defined for quivers with one vertex and n > 1 loops
        """
        if len(self.vertices) == 1:
            m = gcd(self.dimension_vector)
            P_local = PolynomialRing(QQ, 't,q')
            t, q = P_local.gens()
            inpol = 0

            for i in range(1, m + 1):
                a = []
                a = a + [i]
                quiver = QuiverRepresentation(self.vertices, self.edges, a)
                inpol = inpol - quiver.A_Gamma() * t**i




            p_poly = P_local(inpol)

            Plethystic = pexp(p_poly, m)

            Pe = 1 - Plethystic

            p = P_local(Pe)


            pol = p.dict()
            mon = pol.keys()
            mon_m = []
            for i in mon:
                if i[0] == m:
                    mon_m = mon_m + [i]
            C_gamma = 0
            for j in mon_m:
                C_gamma = C_gamma + pol[j] * q**j[1]


            return C_gamma
        else:
            return None

    def C_Gamma_list(self, kac_upto_m):
        """
        Only defined for quivers with one vertex and n > 1 loops,

        Input: Quiver + List of Kac polynomials upto m

        """

        if len(self.vertices) == 1:
            m = gcd(self.dimension_vector)
            P_local = PolynomialRing(QQ, 't,q')
            t, q = P_local.gens()
            inpol = 0
            for i in range(0, m ):

                kac = kac_upto_m[i]
                Kac_i = P_local(kac)
                inpol = inpol - Kac_i * t**(i+1)


            p_poly = P_local(inpol)
            print('p_poly: ', p_poly)
            Plethystic = pexp(p_poly, m)

            print('plethystic: ', Plethystic)

            Pe = 1 - Plethystic

            p = P_local(Pe)


            pol = p.dict()
            mon = pol.keys()
            mon_m = []
            for i in mon:
                if i[0] == m:
                    mon_m = mon_m + [i]
            C_gamma = 0
            for j in mon_m:
                C_gamma = C_gamma + pol[j] * q**j[1]


            return C_gamma
        else:
            return None

####################################################################################

def inner_product_partitions(partition1, partition2):
    # Convert the partitions to conjugates
    partition1c = Partition(partition1).conjugate()
    partition2c = Partition(partition2).conjugate()

    # Compute the inner product as the dot product
    inner_product = 0
    m = min(len(partition1c), len(partition2c))
    for i in range(m):
        inner_product = inner_product + partition1c[i] * partition2c[i]

    return inner_product

def b_pi(partition, w):
    product = 1
    exp = Partition(partition).to_exp()
    for i in exp:
        product = product * Phi(i, w)

    return product

def Phi(n, w):
    product = 1
    if n == 0:
        return 1
    else:
        for i in range(1, n + 1):
            product = product * (1 - w**(-i))
        return product

def pexp(poly, limit):
    """
    Computes the plethystic exponential of a polynomial up to a specified limit.

    Parameters:
    poly : Polynomial
        The polynomial for which the plethystic exponential is to be computed.
    limit : int
        The upper limit for the summation index.

    Returns:
    Polynomial
        The plethystic exponential of the polynomial.
    """
    # Define the quotient ring
    S = poly.parent()
    t, q = S.gens()
    S_quo = S.quotient(S.ideal([t**(limit + 1)]))

    # Convert the polynomial to the quotient ring
    poly_quo = S_quo(poly)


    # Initialize the plethystic exponential as 1 (the multiplicative identity)
    pexp_result = S_quo(1)

    # Iterate over the monomials and their coefficients
    for monomial, coefficient in poly_quo.lift().dict().items():
        s1 = (t**monomial[0])
        s2 = (q**monomial[1])
        s = s1 * s2
        term = (1 - s)**(-coefficient)

        # Multiply the term into the plethystic exponential result
        pexp_result *= term


    pexp_result = pexp_result.lift()

    return pexp_result





####################################################################################

# Define the quiver components with repeated edges
Q_0 = ['v1']  # Vertices of the quiver
Q_1 = [('v1', 'v1'), ('v1', 'v1'),('v1','v1')]  # Edges of the quiver, including repeated edges
alpha = [5]  # Dimension vector

M_0 = ['v1']  # Vertices of the quiver
M_1 = [('v1', 'v1'), ('v1', 'v1')]  # Edges of the quiver, including repeated edges
beta = [4]  # Dimension vector

N_0 = ['v1', 'v2', 'v3']  # Vertices of the quiver
N_1 = [('v1', 'v2'), ('v2', 'v1'), ('v2', 'v3')]  # Edges of the quiver, including repeated edges
gamma = [1, 1, 0]  # Dimension vector

# Initialize the quiver representation object
quiver_rep = QuiverRepresentation(Q_0, Q_1, alpha)
quiverM_rep = QuiverRepresentation(M_0, M_1, beta)
quiverN_rep = QuiverRepresentation(N_0, N_1, gamma)

# List of Kac Polynomials upto m
kac_upto_m = [q**3,
              q**9 + q**7 + q**5,
              q**19 + q**17 + q**16 + q**15 + q**14 + 2*q**13 + q**12 + 2*q**11 + 2*q**10 + q**9 + q**8 + q**7,
              q**33 + q**31 + q**30 + 2*q**29 + q**28 + 3*q**27 + 2*q**26 + 4*q**25 + 3*q**24 + 5*q**23 + 4*q**22 + 7*q**21 + 5*q**20 + 8*q**19 + 6*q**18 + 9*q**17 + 6*q**16 + 8*q**15 + 5*q**14 + 6*q**13 + 3*q**12 + 3*q**11 + q**10 + q**9,
              q**51 + q**49 + q**48 + 2*q**47 + 2*q**46 + 3*q**45 + 3*q**44 + 5*q**43 + 5*q**42 + 7*q**41 + 7*q**40 + 10*q**39 + 10*q**38 + 13*q**37 + 14*q**36 + 17*q**35 + 18*q**34 + 22*q**33 + 23*q**32 + 27*q**31 + 28*q**30 + 32*q**29 + 33*q**28 + 37*q**27 + 38*q**26 + 40*q**25 + 40*q**24 + 41*q**23 + 39*q**22 + 38*q**21 + 34*q**20 + 31*q**19 + 26*q**18 + 21*q**17 + 16*q**16 + 11*q**15 + 7*q**14 + 4*q**13 + 2*q**12 + q**11
             ]

# Display the quiver
quiver_rep.display()

# Print the variables and polynomial
print(quiver_rep.variables)
print(quiver_rep.A_Gamma())

print('end')
print(quiver_rep.C_Gamma())
#print(quiver_rep.C_Gamma_list(kac_upto_m))
